// Generated by CoffeeScript 1.7.1

/*
碁カーネル
中国ルールを採用。ただし自殺手は着手禁止とする。
 */

(function() {
  var BIT_BOARD_SIZE, BLACK, BOARD_SIZE, EMPTY, EvaluationResult, MAX_SCORE, ON_BOARD, OnBoard, WHITE, adjacenciesAt, adjacent, captured, compare, countBits, evalUntilDepth, evaluate, opponentOf, positionToBit, positionsToBits, setBoardSize, string;

  Array.prototype.isEqualTo = function(array) {

    /*　配列の要素すべてが等しいか否かを返す。 */
    if (this.length !== array.length) {
      return false;
    }
    return this.every(function(e, i) {
      return e === array[i];
    });
  };

  BOARD_SIZE = null;

  BIT_BOARD_SIZE = null;

  ON_BOARD = null;

  MAX_SCORE = null;

  EMPTY = 0;

  BLACK = 1;

  WHITE = 2;

  setBoardSize = function(size) {

    /* 碁盤のサイズを設定する。 デフォルトは4路。 */
    var x, y, _i, _j;
    BOARD_SIZE = size;
    BIT_BOARD_SIZE = BOARD_SIZE + 2;
    if (BIT_BOARD_SIZE * BOARD_SIZE > 32) {
      throw "overflow " + (BIT_BOARD_SIZE * BOARD_SIZE);
    }
    ON_BOARD = 0;
    for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
      for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
        ON_BOARD |= positionToBit([x, y]);
      }
    }
    return MAX_SCORE = BOARD_SIZE * BOARD_SIZE - 2;
  };

  opponentOf = function(stone) {

    /* 黒(BLACK)なら白(WHITE)、白(WHITE)なら黒(BLACK)を返す。 */
    switch (stone) {
      case BLACK:
        return WHITE;
      case WHITE:
        return BLACK;
      default:
        throw 'error';
    }
  };

  adjacenciesAt = function(position) {

    /* プライベート */

    /* 隣接する点の座標の配列を返す。 */
    var e, result, x, y, _i, _len, _ref;
    result = [];
    _ref = [[0, -1], [-1, 0], [1, 0], [0, 1]];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      x = position[0] + e[0];
      y = position[1] + e[1];
      if ((1 <= x && x <= BOARD_SIZE) && (1 <= y && y <= BOARD_SIZE)) {
        result.push([x, y]);
      }
    }
    return result;
  };

  compare = function(a, b, stone) {

    /*
    探索のための優先順位を決める局面比較関数。
    a, bは比較する局面。stoneの立場で比較し、結果を整数値で返す。
    
    1. スコアに差があればそれを返す。(石を取った手を優先する)
    2. 自分の眼の数に差があればそれを返す。(眼形が多い手を優先する)
    3. 自分のダメの数と相手のダメの数の差に差があればそれを返す。(攻め合いに有効な手を優先する)
    4. 自分の連(string)の数に差があればそれにマイナスを掛けた値を返す。(つながる手を優先する)
    5. 自分のつながり(contact)の数に差があればそれにマイナスを掛けた値を返す。(つながる手を優先する)
     */
    var aBlack, aWhite, bBlack, bWhite, dame, eyes, index, score, strings;
    score = a.score() - b.score();
    if (score !== 0) {
      if (stone === BLACK) {
        return score;
      } else {
        return -score;
      }
    }
    index = stone === BLACK ? 0 : 1;
    eyes = a.eyes()[index].length - b.eyes()[index].length;
    if (eyes !== 0) {
      return eyes;
    }
    switch (stone) {
      case BLACK:
        dame = (a.numOfLiberties(BLACK) - a.numOfLiberties(WHITE)) - (b.numOfLiberties(BLACK) - b.numOfLiberties(WHITE));
        if (dame !== 0) {
          return dame;
        }
        strings = b.strings()[0].length - a.strings()[0].length;
        if (strings !== 0) {
          return strings;
        }
        aBlack = a.stringsToContacts(aBlack);
        bBlack = b.stringsToContacts(bBlack);
        return bBlack.length - aBlack.length;
      case WHITE:
        dame = (a.numOfLiberties(WHITE) - a.numOfLiberties(BLACK)) - (b.numOfLiberties(WHITE) - b.numOfLiberties(BLAC));
        if (dame !== 0) {
          return dame;
        }
        strings = b.strings()[1].length - a.strings()[1].length;
        if (strings !== 0) {
          return strings;
        }
        aWhite = a.stringsToContacts(aWhite);
        bWhite = b.stringsToContacts(bWhite);
        return bWhite.length - aWhite.length;
    }
  };

  OnBoard = (function() {

    /* 盤上の状態を表すクラス */
    OnBoard.fromString = function(str) {

      /* 盤上の状態を表すX(黒)とO(白)と空点(スペース)と改行で文字列からインスタンスを生成する。 */
      var blacks, line, lines, whites, x, y, _i, _j, _len;
      blacks = [];
      whites = [];
      lines = str.replace(/(\r?\n)*$/, '').split(/\r?\n/);
      if (lines.length !== BOARD_SIZE) {
        throw 'bad format';
      }
      for (y = _i = 0, _len = lines.length; _i < _len; y = ++_i) {
        line = lines[y];
        if (line.length !== BOARD_SIZE) {
          throw 'bad format';
        }
        for (x = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_j : --_j) {
          switch (line.charAt(x)) {
            case 'X':
              blacks.push([x, y]);
              break;
            case 'O':
              whites.push([x, y]);
              break;
            case ' ':
              null;
              break;
            default:
              throw 'bad format';
          }
        }
      }
      return new OnBoard(blacks, whites);
    };

    OnBoard.random = function() {

      /* ランダムな配置の碁盤を返す。 */
      var blacks, result, whites, x, y, _i, _j;
      while (true) {
        blacks = [];
        whites = [];
        for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
          for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
            switch (Math.floor(Math.random() * 3)) {
              case 1:
                blacks.push([x, y]);
                break;
              case 2:
                whites.push([x, y]);
            }
          }
        }
        result = new OnBoard(blacks, whites);
        if (result.isLegal()) {
          return result;
        }
      }
    };

    function OnBoard(blacks, whites) {

      /* blacks, whitesは黒石/白石のある場所の座標の配列。 */
      this.black = positionsToBits(blacks);
      this.white = positionsToBits(whites);
    }

    OnBoard.prototype.isEmptyAt = function(position) {

      /* 座標が空点かどうか。 */
      switch (this.stateAt(position)) {
        case BLACK:
        case WHITE:
          return false;
        default:
          return true;
      }
    };

    OnBoard.prototype.isLegalAt = function(stone, position) {

      /*
      座標が合法着手点かどうか。
      コウ(循環)の着手禁止はチェックしない。循環については手順関連で別途チェックすること
       */
      var board;
      board = this.copy();
      return board.place(stone, position);
    };

    OnBoard.prototype.isLegal = function() {

      /* 盤上の状態が合法がどうか。(ダメ詰まりの石が存在しないこと) */
      var d, g, x, y, _i, _j, _ref;
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          if (!(!this.isEmptyAt([x, y]))) {
            continue;
          }
          _ref = this.stringAndLibertyAt([x, y]), g = _ref[0], d = _ref[1];
          if (d.length === 0) {
            return false;
          }
        }
      }
      return true;
    };

    OnBoard.prototype.isEqualTo = function(board) {

      /* 盤上が同じかどうか。 */
      return this.black === board.black && this.white === board.white;
    };

    OnBoard.prototype.stateAt = function(position) {

      /* 座標の状態を返す。 */
      var bitPos;
      bitPos = positionToBit(position);
      if (this.black & bitPos) {
        return BLACK;
      } else if (this.white & bitPos) {
        return WHITE;
      } else {
        return EMPTY;
      }
    };

    OnBoard.prototype.numOf = function(stone) {
      switch (stone) {
        case BLACK:
          return countBits(this.black);
        case WHITE:
          return countBits(this.white);
        default:
          throw 'numOf';
          return 0;
      }
    };

    OnBoard.prototype.deployment = function() {

      /*
      現在の配置を返す。
      コンストラクタの逆関数
       */
      var blacks, position, whites, x, y, _i, _j;
      blacks = [];
      whites = [];
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          position = [x, y];
          switch (this.stateAt(position)) {
            case BLACK:
              blacks.push(position);
              break;
            case WHITE:
              whites.push(position);
          }
        }
      }
      return [blacks, whites];
    };

    OnBoard.prototype.score = function() {

      /*
      石の数の差を返す。
      中国ルールを採用。盤上の石の数の差が評価値。
       */
      return countBits(this.black) - countBits(this.white);
    };

    OnBoard.prototype.add = function(stone, position) {

      /*
      石を座標にセットする。
      stateはBLACK, WHITEのいずれか。(本当はEMPTYもOK)
       */
      var bitPos;
      bitPos = positionToBit(position);
      switch (stone) {
        case BLACK:
          this.black |= bitPos;
          this.white &= ~bitPos;
          break;
        case WHITE:
          this.white |= bitPos;
          this.black &= ~bitPos;
          break;
        case EMPTY:
          this.black &= ~bitPos;
          this.white &= ~bitPos;
          break;
        default:
          throw 'unknown type';
      }
    };

    OnBoard.prototype["delete"] = function(position) {

      /* 座標の石をただ取る。 */
      return this.add(EMPTY, position);
    };

    OnBoard.prototype.candidates = function(stone) {

      /* stoneの手番で、合法かつ自分の眼ではない座標すべての配列を返す。 */
      var position, result, x, y, _i, _j;
      result = [];
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          position = [x, y];
          if (this.isLegalAt(stone, position) && !(this.whoseEyeAt(position) === stone)) {
            result.push(position);
          }
        }
      }
      return result;
    };

    OnBoard.prototype.stringAt = function(position) {
      var board;
      board = (function() {
        switch (this.stateAt(position)) {
          case BLACK:
            return this.black;
          case WHITE:
            return this.white;
          default:
            return ~(this.black | this.white);
        }
      }).call(this);
      return string(board, positionToBit(position));
    };

    OnBoard.prototype.stringAndLibertyAt = function(position) {

      /*
      座標の石と接続した同一石の座標の配列とその石の集合のダメの座標の配列を返す。
      接続した石の集団を連(ストリング)と呼ぶ。
       */
      var opponent;
      opponent = (function() {
        switch (this.stateAt(position)) {
          case BLACK:
            return this.white;
          case WHITE:
            return this.black;
        }
      }).call(this);
      return [string, adjacent(this.stringAt(position) & ~opponent)];
    };

    OnBoard.prototype.emptyStrings = function() {

      /* 盤上の空点のストリングを返す。 */
      var position, result, x, y, _i, _j;
      result = [];
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          position = [x, y];
          if ((this.isEmptyAt(position)) && (result.every(function(s) {
            return !(s & positionToBit(position));
          }))) {
            result.push(this.stringAt(position));
          }
        }
      }
      return result;
    };

    OnBoard.prototype.numOfLiberties = function(stone) {
      var lib, opponent, self;
      switch (stone) {
        case BLACK:
          self = this.black;
          opponent = this.white;
          break;
        case WHITE:
          self = this.white;
          opponent = this.black;
      }
      lib = adjacent(self) & ~opponent;
      return countBits(lib);
    };

    OnBoard.prototype.strings = function() {

      /* 盤上のストリングを返す。1つ目の要素が黒のストリング、2つ目の要素が白のストリング。 */
      var position, result, x, y, _i, _j;
      result = [[], []];
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          position = [x, y];
          switch (this.stateAt(position)) {
            case BLACK:
              if (result[0].every(function(g) {
                return g[0].every(function(e) {
                  return !e.isEqualTo(position);
                });
              })) {
                result[0].push(this.stringAndLibertyAt(position));
              }
              break;
            case WHITE:
              if (result[1].every(function(g) {
                return g[0].every(function(e) {
                  return !e.isEqualTo(position);
                });
              })) {
                result[1].push(this.stringAndLibertyAt(position));
              }
          }
        }
      }
      return result;
    };

    OnBoard.prototype.isTouchedBetween = function(a, b) {

      /* ストリングa, bが接触しているかどうか。 */
      return (adjacent(a) | b) !== 0;
    };

    OnBoard.prototype.stringsToContacts = function(strings) {

      /* string(接続した石の集合)の配列からcontact(接続もしくは接触した石の集合)を算出して返す。 */
      var i, j, result, unique, _i, _j, _ref, _ref1, _ref2;
      result = [];
      for (i = _i = 0, _ref = strings.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (result[i] == null) {
          result[i] = [strings[i]];
        }
        for (j = _j = _ref1 = i + 1, _ref2 = strings.length; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; j = _ref1 <= _ref2 ? ++_j : --_j) {
          if (this.isTouchedBetween(strings[i][0], strings[j][0])) {
            result[i].push(strings[j]);
            result[j] = result[i];
          }
        }
      }
      unique = function(array) {
        var e, _k, _len;
        result = [];
        for (_k = 0, _len = array.length; _k < _len; _k++) {
          e = array[_k];
          if (result.indexOf(e) < 0) {
            result.push(e);
          }
        }
        return result;
      };
      return unique(result);
    };

    OnBoard.prototype.whoseEyeAt = function(position, checkings) {
      var adj, bitBoard, gd0, gds, gds0, _i, _len;
      if (checkings == null) {
        checkings = [];
      }

      /*
      座標が眼かどうか調べ、眼ならばどちらの眼かを返し、眼でないならnullを返す。
      眼の定義は、その座標が同一石で囲まれていて、囲んでいる石がその座標以外のダメを詰められないこと。
      checkingsは再帰用引数
      石をかこっている時、2目以上の空点の時、眼と判定しないので改良が必要。
       */
      if (!this.isEmptyAt(position)) {
        return null;
      }
      adj = adjacent(positionToBit(position));
      bitBoard = (adj & this.black) === adj ? this.black : (adj & this.white) === adj ? this.white : null;
      if (typeof stone === "undefined" || stone === null) {
        return null;
      }
      gds0 = string(bitBoard, adj);
      gds = [];
      for (_i = 0, _len = gds0.length; _i < _len; _i++) {
        gd0 = gds0[_i];
        if (gds.length === 0 || !(gds.some(function(gd) {
          return gd[0].some(function(e) {
            return e.isEqualTo(gd0[0][0]);
          });
        }))) {
          gds.push(gd0);
        }
      }
      if (gds.length === 1 || (gds.every((function(_this) {
        return function(gd) {
          var newCheckings;
          newCheckings = checkings.concat([position]);
          return gd[1].filter(function(e) {
            return !e.isEqualTo(position);
          }).some(function(d) {
            return checkings.some(function(e) {
              return d.isEqualTo(e);
            }) || (function(c) {
              return _this.whoseEyeAt(d, c) === stone;
            })(newCheckings);
          });
        };
      })(this)))) {
        return stone;
      } else {
        return null;
      }
    };

    OnBoard.prototype.eyes = function() {

      /* 眼の座標を返す。１つ目は黒の眼、２つ目は白の眼。 */
      var result, x, y, _i, _j;
      result = [[], []];
      for (x = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (y = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_j : --_j) {
          switch (this.whoseEyeAt([x, y])) {
            case BLACK:
              result[0].push([x, y]);
              break;
            case WHITE:
              result[1].push([x, y]);
          }
        }
      }
      return result;
    };

    OnBoard.prototype.copy = function() {
      var blacks, whites, _ref;
      _ref = this.deployment(), blacks = _ref[0], whites = _ref[1];
      return new OnBoard(blacks, whites);
    };

    OnBoard.prototype.captureBy = function(stone) {

      /* 座標に置かれた石によって取ることができる相手の石を取り上げて、取り上げた石のビットボードを返す。 */
      var captives, objective, subjective;
      objective = (function() {
        switch (stone) {
          case BLACK:
            return this.white;
          case WHITE:
            return this.black;
        }
      }).call(this);
      subjective = (function() {
        switch (stone) {
          case BLACK:
            return this.black;
          case WHITE:
            return this.white;
        }
      }).call(this);
      captives = captured(objective, subjective);
      switch (stone) {
        case BLACK:
          this.white &= ~captives;
          break;
        case WHITE:
          this.black &= ~captives;
      }
      return captives;
    };

    OnBoard.prototype.place = function(stone, position) {

      /*
      石を座標に着手する。
      着手候補を減らす便宜上、自殺手は着手禁止とする。(中国ルールからの逸脱)
      着手が成立したらtrue。着手禁止の場合false。
      循環手か否かは未チェック。
       */
      var liberty, string, _ref;
      if (position == null) {
        return true;
      }
      if (!this.isEmptyAt(position)) {
        return false;
      }
      this.add(stone, position);
      this.captureBy(stone);
      _ref = this.stringAndLibertyAt(position), string = _ref[0], liberty = _ref[1];
      if (countBits(liberty) === 0) {
        this["delete"](position);
        return false;
      }
      return true;
    };

    OnBoard.prototype.toString = function() {
      var str, x, y, _i, _j;
      str = new String();
      for (y = _i = 1; 1 <= BOARD_SIZE ? _i <= BOARD_SIZE : _i >= BOARD_SIZE; y = 1 <= BOARD_SIZE ? ++_i : --_i) {
        for (x = _j = 1; 1 <= BOARD_SIZE ? _j <= BOARD_SIZE : _j >= BOARD_SIZE; x = 1 <= BOARD_SIZE ? ++_j : --_j) {
          str += (function() {
            switch (this.stateAt([x, y])) {
              case BLACK:
                return 'X';
              case WHITE:
                return 'O';
              default:
                return ' ';
            }
          }).call(this);
        }
        str += '\n';
      }
      return str;
    };

    return OnBoard;

  })();

  countBits = function(x) {
    x -= (x >>> 1) & 0x55555555;
    x = (x & 0x33333333) + ((x >>> 2) & 0x33333333);
    x = (x + (x >>> 4)) & 0x0F0F0F0F;
    x += x >>> 8;
    x += x >>> 16;
    return x & 0x0000003F;
  };

  positionToBit = function(position) {
    return 1 << (position[0] + (position[1] - 1) * BIT_BOARD_SIZE);
  };

  positionsToBits = function(positions) {
    var bits, e, _i, _len;
    bits = 0;
    for (_i = 0, _len = positions.length; _i < _len; _i++) {
      e = positions[_i];
      bits |= positionToBit(e);
    }
    return bits;
  };

  adjacent = function(bitBoard) {
    var expanded;
    expanded = bitBoard << BIT_BOARD_SIZE;
    expanded |= bitBoard << 1;
    expanded |= bitBoard >>> 1;
    expanded |= bitBoard >>> BIT_BOARD_SIZE;
    return expanded & (~bitBoard) & ON_BOARD;
  };

  string = function(bitBoard, seed) {
    var expanded;
    expanded = seed | (adjacent(seed)) & bitBoard;
    if (expanded === seed) {
      return seed;
    } else {
      return string(bitBoard, expanded);
    }
  };

  captured = function(objective, subjective) {
    var breaths, l;
    l = adjacent(objective) & ~subjective;
    breaths = adjacent(l);
    return objective & (~string(objective, breaths));
  };

  setBoardSize(4);


  /*
  局面評価
  中国ルールを採用。ただし自殺手は着手禁止とする。
   */

  evaluate = function(history, next) {
    return evalUntilDepth(history, next, 100);

    /*
    for depth in [18, 34]
        result = evalUntilDepth board, next, 0, depth, history
        return result unless isNaN result
    NaN
     */
  };

  EvaluationResult = (function() {
    function EvaluationResult(value, history) {
      this.value = value;
      this.history = history;
    }

    return EvaluationResult;

  })();

  evalUntilDepth = function(history, next, depth, alpha, beta) {
    var alpha0, b, beta0, board, candidates, nodes, opponent, parity, result, _i, _j, _len, _len1;
    if (alpha == null) {
      alpha = {
        value: -Infinity,
        history: null
      };
    }
    if (beta == null) {
      beta = {
        value: Infinity,
        history: null
      };
    }

    /*
    historyはOnBoardインスタンスの配列
    historyの最終局面の評価値と評価値に至る手順を返す。
    nextは次の手番。
    depthは最大深度。反復進化パラメータ
    alpha, betaはαβ枝狩りパラメータ
     */
    board = history[history.length - 1];
    if ((board === history[history.length - 2]) && (board === history[history.length - 3])) {
      return new EvaluationResult(board.score(), history);
    }
    if (depth === 0) {
      return new EvaluationResult(NaN, history);
    }
    opponent = opponentOf(next);
    candidates = board.candidates(next);
    parity = history.length % 2;
    nodes = candidates.filter(function(b) {
      return history.filter(function(e, i) {
        return (i % 2) === parity;
      }).every(function(e) {
        return !b.isEqualTo(e);
      });
    });
    switch (next) {
      case BLACK:
        nodes.sort(function(a, b) {
          return -compare(a, b, next);
        });
        alpha0 = alpha;
        for (_i = 0, _len = nodes.length; _i < _len; _i++) {
          b = nodes[_i];
          if ((b.numOf(WHITE) <= 1) && (b.emptyStrings().length >= 2)) {
            alpha = new EvaluationResult(MAX_SCORE, history.concat(b));
            return alpha;
          } else {
            result = evalUntilDepth(history.concat(b), opponent, depth - 1, alpha, beta);
            if (result.value === MAX_SCORE) {
              return result;
            }
            if ((isNaN(alpha.value && result.value > 0)) || (alpha.value < result.value)) {
              alpha = result;
            }
            if (alpha.value >= beta.value) {
              return beta;
            }
          }
        }
        result = evalUntilDepth(history.concat(board), opponent, depth - 1, alpha, beta);
        if (result.value === MAX_SCORE) {
          return result;
        }
        alpha = (isNaN(alpha.value)) || (alpha.value >= result.value) ? alpha : result;
        if (alpha.value >= beta.value) {
          return beta;
        }
        return alpha;
      case WHITE:
        nodes.sort(function(a, b) {
          return -compare(a, b, next);
        });
        beta0 = beta;
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          b = nodes[_j];
          if ((b.numOf(BLACK) <= 1) && (b.emptyStrings().length >= 2)) {
            beta = new EvaluationResult(-MAX_SCORE, history.concat(b));
            return beta;
          } else {
            result = evalUntilDepth(history.concat(b), opponent, depth - 1, alpha, beta);
            if (result.value === -MAX_SCORE) {
              return result;
            }
            if ((isNaN(beta.value && result.value < 0)) || (beta.value > result.value)) {
              beta = result;
            }
            if (alpha.value >= beta.value) {
              return alpha;
            }
          }
        }
        result = evalUntilDepth(history.concat(board), opponent, depth - 1, alpha, beta);
        if (result.value === -MAX_SCORE) {
          return result;
        }
        beta = (isNaN(beta.value)) || (beta.value <= result.value) ? beta : result;
        if (alpha.value >= beta.value) {
          return alpha;
        }
        return beta;
    }
  };

  self.onmessage = function(event) {
    var error, history, result, _ref, _ref1;
    try {
      history = event.data.history.map(function(e) {
        return OnBoard.fromString(e);
      });
      if ((_ref = history[history.length - 2]) != null ? _ref.isEqualTo(history[history.length - 1]) : void 0) {
        history[history.length - 2] = history[history.length - 1];
        if ((_ref1 = history[history.length - 3]) != null ? _ref1.isEqualTo(history[history.length - 1]) : void 0) {
          history[history.length - 3] = history[history.length - 1];
        }
      }
      if (event.data.size != null) {
        setBoardSize(event.data.size);
      }
      result = evaluate(history, event.data.next);
      event.data.value = result.value;
      return event.data.history = result.history.map(function(e) {
        return e.toString();
      });
    } catch (_error) {
      error = _error;
      return event.data.error = {
        line: error.line,
        message: error.message,
        sourceURL: error.sourceURL,
        stack: error.stack
      };
    } finally {
      postMessage(event.data);
      close();
    }
  };

}).call(this);
